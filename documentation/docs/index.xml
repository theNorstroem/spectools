<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on フロー FIDL</title>
    <link>http://fidl.furo.pro/</link>
    <description>Recent content in Introduction on フロー FIDL</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://fidl.furo.pro/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>B E C</title>
      <link>http://fidl.furo.pro/docs/tools/BEC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/tools/BEC/</guid>
      <description>フロー furoBEC #  The furo build essentials container. #  This container contains all tools you need to work with a furo spec project.
Usage #  Bash mode
docker run -it --rm -v `pwd`:/specs thenorstroem/furo-bec # do your stuff # type exit to quit exit  Command mode
docker run -it --rm -v `pwd`:/specs thenorstroem/furo-bec build   TIPP: If your spectools commands have to access different directories, do not forget to mount them.</description>
    </item>
    
    <item>
      <title>Defining a Type</title>
      <link>http://fidl.furo.pro/docs/overview/define_type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/overview/define_type/</guid>
      <description>Defining A Type #  Furo types are organized in packages, you can have as many types per package as you want.
Lets do a simple example in µSpec and spec and see what the resulting proto will be.
Define the type in µSpec #  The following example is a complete type definition. You can use every type from your specs and installed dependencies. You do not need to import them.</description>
    </item>
    
    <item>
      <title>Types</title>
      <link>http://fidl.furo.pro/docs/specs/types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/specs/types/</guid>
      <description>Anatomy of a type spec #  A type spec consists of 2 main sections (fields and __proto) and some properties on the root.
name #  This property is deprecated. Fill in the same as you fill in on the property type for compatibility with some old generators.
type #  The type of the field without the package name. Write it in CamelCase with a capital letter at the beginning.</description>
    </item>
    
    <item>
      <title>Types</title>
      <link>http://fidl.furo.pro/docs/%C2%B5Specs/types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/%C2%B5Specs/types/</guid>
      <description>Anatomy of a type µSpec #  The µType specs are regular yaml files.
The &amp;ldquo;type-object&amp;rdquo; contains 3 fields. The fields type, fields are mandatory, the field target is optional and autogenerated when ommited.
You can have as many type definitions per file as you want. It makes sense that you put types in a file, that belongs togehter.
File: muspec/sample.types.yaml
- type:&amp;#39;sample.Sample #A sample type&amp;#39;fields:password:&amp;#39;* string:1 #The password.&amp;#39;username:&amp;#39;* string:2 #The username or email, or something to identify.</description>
    </item>
    
    <item>
      <title>Defining a Service</title>
      <link>http://fidl.furo.pro/docs/overview/define_service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/overview/define_service/</guid>
      <description>Defining A Service #  Furo services are organized in packages. They can use all types that you have defined in your project or are installed as dependencies.
Lets do a simple example in µSpec and spec and see what the resulting proto will be.
Define the service in µSpec #  The following example is a complete service definition. You can use every type from your specs and installed dependencies.</description>
    </item>
    
    <item>
      <title>Default Values</title>
      <link>http://fidl.furo.pro/docs/overview/default_values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/overview/default_values/</guid>
      <description>Fields And Default Values #  The client lib will fill the &amp;ldquo;proto&amp;rdquo; default values for the fields when they are not transmited. This means i.e. numeric types will get a 0, strings a empty string. The default value that you can specify in the specs has nothing to do with proto directly. Proto 3 does not know anything about default values.
This comes very handy when you create an instance of a type on the client side and pass the data object to a form.</description>
    </item>
    
    <item>
      <title>Scalar Types</title>
      <link>http://fidl.furo.pro/docs/overview/scalar_value_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/overview/scalar_value_types/</guid>
      <description>Scalar Value Types #  Furo specs knows the same scalar types which are defined in ProtocolBuffers.
   type note golang java es6     string Please use UTF-8 *string String String   bytes  []byte ByteString String   bool  *bool boolean Boolean   float  *float32 float Number   double  *float64 double Number   int32  *int32 int Number   int64  *int64 long Number   uint32  *uint32 int Number   uint64  *uint64 long Number   sint32  *int32 int Number   sint64  *int64 long Number   fixed32  *uint32 int Number   fixed64  *uint64 long Number   sfixed32  *int32 int Number   sfixed64  *int64 long Number    </description>
    </item>
    
    <item>
      <title>Using Other Types</title>
      <link>http://fidl.furo.pro/docs/overview/using_other_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/overview/using_other_types/</guid>
      <description>Using Other Types #  You can use other types as field types. You can use every type from your specs and installed dependencies. You do not need to import them. The imports are resolved and checked by the spectools when you translate your µSecs to standard specs with the command spectools muSpec2spec or with the command muspec checkImpors.
By using types which are not installed in the dependencies or not from your spec project, do not forget to import them in your protoc command with &amp;ldquo;-I&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Enumerations</title>
      <link>http://fidl.furo.pro/docs/overview/enums/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/overview/enums/</guid>
      <description>Enumerations #  Enums are not covered in spectools at the moment.
Check this issue for details/dates/state.
 </description>
    </item>
    
    <item>
      <title>Oneof</title>
      <link>http://fidl.furo.pro/docs/overview/oneof/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/overview/oneof/</guid>
      <description>Oneof #  If you have a message with many optional fields and where at most one field will be set at the same time.
In the client lib, at most one field can be set at the same time. Setting any member of the oneof automatically clears all the other members.
The oneof feature is not available µSpec. You have to specify them in the spec.  Using Oneof #  Just define a name for the oneof.</description>
    </item>
    
    <item>
      <title>Maps</title>
      <link>http://fidl.furo.pro/docs/overview/maps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/overview/maps/</guid>
      <description>Maps #  If you want to create an associative map as part of your data definition, you can define them as a field type like any other type.
The key of the map can only be a string.  in µSpec #  fields:properties:&amp;#39;map&amp;lt;string,furo.u33e.Property&amp;gt;:9 #Add properties you want to expose of reflect on your component.&amp;#39;in spec #  fields:properties:type:map&amp;lt;string,furo.u33e.Property&amp;gt;description:Add properties you want to expose of reflect on your component.</description>
    </item>
    
    <item>
      <title>Packages</title>
      <link>http://fidl.furo.pro/docs/overview/packages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/overview/packages/</guid>
      <description>Packages #  Packages are not optional in FIDLs. Even when you are in the same µType file, you have to write at least the deepest package name to address another type from the same package.
Packages in µType are defined in the type field. The package for the type below will be auth.
- type:&amp;#39;auth.Credentials #Credentials type for login.&amp;#39;fields:password:&amp;#39;* string:1 #The password.&amp;#39;username:&amp;#39;* string:2 #The username or email, or something to identify.</description>
    </item>
    
    <item>
      <title>Protobuf Extension</title>
      <link>http://fidl.furo.pro/docs/overview/extensions/extension_proto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/overview/extensions/extension_proto/</guid>
      <description>The Protobuf Extension #  The protobuf extension is meanwhile a fix part of the specs and the spectools.
In this, meanwhile built in, extesnion you define things for the protos.
__proto extension in a type #  The proto extension in a type defines the package, target file, imports (*.proto) and options
__proto:package:authtargetfile:auth.protoimports:[]options:go_package:github.com/veith/doit-specs/dist/pb/auth;authpbjava_multiple_files:&amp;#34;true&amp;#34;java_outer_classname:AuthProtojava_package:com.furo.baseauth__proto extension in a field of a type #  The proto extension in a field let you define the field id an can set a oneof group.</description>
    </item>
    
    <item>
      <title>UI Extension</title>
      <link>http://fidl.furo.pro/docs/overview/extensions/extension_ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/overview/extensions/extension_ui/</guid>
      <description>__ui extension #  Define some options for the ui-builder (furoc-gen-u33e).
____ui extension in a field of a type #  fields:id:type:stringdescription:The identifier.</description>
    </item>
    
    <item>
      <title>Style Guide</title>
      <link>http://fidl.furo.pro/docs/overview/style_guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/overview/style_guide/</guid>
      <description>Style Guide #  The style guide is nearly similar to the protocol buffers style guide and follows also the google api design guidelines.
File structure #  Files should be named lower_snake_case.types.yaml.
You can put the services and types to the same folder (thematic group). You can move the files around without any effect. The resulting protos does not depend on the FIDL file names or structure, they will follow the given package definitions.</description>
    </item>
    
    <item>
      <title>Hello</title>
      <link>http://fidl.furo.pro/posts/hello/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/posts/hello/</guid>
      <description>Initial documentation #  Hi and welcome to the first version of the FIDL documentation. If you have some issues, found typos and have suggestions, feel free to open an issue or better make a pull request.</description>
    </item>
    
    <item>
      <title>Services</title>
      <link>http://fidl.furo.pro/docs/specs/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/specs/services/</guid>
      <description>Anatomy of a service spec #  A service spec consists of 2 main sections (services and __proto) and some properties on the root node.
name #  The type of the service without the package name. Follow the style guide and write it in CamelCase with an initial capital.
version #  Put any version information of the service. This field does not affect the URL of the services/methods.</description>
    </item>
    
    <item>
      <title>Services</title>
      <link>http://fidl.furo.pro/docs/%C2%B5Specs/services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://fidl.furo.pro/docs/%C2%B5Specs/services/</guid>
      <description>Anatomy of a service µSpec #  The µService specs are regular yaml files.
The “service-object” contains 5 fields. The fields name, package and methods are mandatory, the field target and description is optional and autogenerated when ommited.
You can have as many service definitions per file as you want. It makes sense that you put types in a file, that belongs togehter.
The field methods in µServcies will translate to services in the standard notation for compatibility reasons, because the standard notation is some years old and changing this would be a breaking change we do not want to do at the moment.</description>
    </item>
    
  </channel>
</rss>
