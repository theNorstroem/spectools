'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/tools/BEC/','title':"B E C",'section':"Additional Tools",'content':"フロー furoBEC #  The furo build essentials container. #  This container contains all tools you need to work with a furo spec project.\n furoBEC on github\nUsage #  Bash mode\ndocker run -it --rm -v `pwd`:/specs thenorstroem/furo-bec # do your stuff # type exit to quit exit  Command mode\ndocker run -it --rm -v `pwd`:/specs thenorstroem/furo-bec build   TIPP: If your spectools commands have to access different directories, do not forget to mount them.\n Installed Tools #   golang git protoc protoc-gen-grpc-gateway (v2) protoc-gen-openapiv2 protoc-gen-go protoc-gen-go-grpc simple-generator spectools furoc   No furoc generators are installed. Add the needed furoc-gen-XXX to the .furobecrc file.\n "});index.add({'id':1,'href':'/docs/commands/spectools_help-command/','title':"help",'section':"Commands",'content':"spectools help #  Help about any command\nSynopsis #  Help provides help for any command in the application. Simply type spectools help [path to command] for full details.\nspectools help [command] [flags] Options #   -h, --help help for help Options inherited from parent commands #   --config string config file (default is CWD/.spectools.yaml) SEE ALSO #    spectools\t- The furo spec toolkit  Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':2,'href':'/docs/installation/','title':"Installation",'section':"Docs",'content':"Installation #  You can install spectools on your local machine. For working with specs only, this is enough. We recommend furoBEC if you have to generate more then \u0026ldquo;just\u0026rdquo; the specs. furoBEC is a docker image which has nearly all dependencies already installed to generate all the additional things you may need to.\nInstallation with brew #  brew tap theNorstroem/tap brew install spectools  Installation with go #  GO111MODULE=on go get github.com/theNorstroem/spectools@v1.xx.xx  Installation from sources #  git clone git@github.com:theNorstroem/spectools.git go install  "});index.add({'id':3,'href':'/docs/commands/spectools_run/','title':"run",'section':"Commands",'content':"spectools run #  Runs a configured flow.\nSynopsis #  Runs a configured flow of spectools commands.\nTo configure a flow of commands just add a \u0026ldquo;flow\u0026rdquo; in the flows section of your .spectools config. A flow is just a list of commands which gets executed in order\nExample Config:\n[.spectools] commands: publish_npm: \u0026quot;./scripts/test.sh\u0026quot; flows: type: - cleanTypeProtoDir - muSpec2Spec - TypeSpec2Proto - publish_npm  Command:\nThis config will run \u0026ldquo;cleanTypeProtoDir\u0026rdquo;, muSpec2Spec\u0026quot;\u0026quot; and \u0026ldquo;TypeSpec2Proto\u0026rdquo; in sequence and calling the command publish_npm\nTipp: If you need the types and services in your command, just call spectools again.\nLike: #!/bin/bash\n# generate the type documentation... spectools exportAsYaml | simple-generator -t scripts/typedoc.tpl \u0026gt; dist/typedoc.md   example\nspectools run [flags] Options #   -f, --flow string A configured flow from the .spectools config (default \u0026quot;default\u0026quot;) -h, --help help for run Options inherited from parent commands #   --config string config file (default is CWD/.spectools.yaml) SEE ALSO #    spectools\t- The furo spec toolkit  Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':4,'href':'/docs/commands/spectools_muSpec2Spec/','title':"muSpec2Spec",'section':"Commands",'content':"spectools muSpec2Spec #  Updates the type specs with the definitions from the type µSpecs.\nSynopsis #  The converter will update your type specs and also delete specs and fields if they are not in the µSpec file anymore.\nDo not forget to set your µSpec folder in the .spectools config.\nspectools muSpec2Spec [flags] Options #   -d, --delete Delete specs which are not in muTypes -h, --help help for muSpec2Spec Options inherited from parent commands #   --config string config file (default is CWD/.spectools.yaml) SEE ALSO #    spectools\t- The furo spec toolkit  Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':5,'href':'/docs/overview/','title':"Overview",'section':"Docs",'content':"Overview #  A brief overview over the main tasks where spectools / furoc / protoc1 are used for.\nWe have seen some nice generators like furoc-gen-ddl2 which uses simple type and field extensions to generate mysql DDLs.\nA documentation generator furoc-gen-apidocs3 is in development.\n mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph TD µSpec(µSpec) Spec([Spec]) µSpec-- spectools --Spec Spec-. spectools .-µSpec someProto[Proto] -- protoc-gen-furo-specs -- µSpec Spec-- spectools --Es6Module Spec-- furoc-gen-apidocs --Docs Spec-- furoc-gen-u33e --U33E U33E-- simple-generator --web-components Spec-- furoc-gen-ddl --ddl[(DDL)] Spec-- spectools --xs[...] Spec-- spectools --Proto Proto-- protoc-gen-grpc-gateway --Gateway Proto-- protoc-gen-openapiv2 --OpenApi OpenApi-- swagger --xo[...] Proto-- protoc --xp[...]   Protos are usualy a product of spectools, but they can also be a source for the µSpecs (protoc-gen-furo-specs) \u0026#x21a9;\u0026#xfe0e;\n sadly not open source :-( \u0026#x21a9;\u0026#xfe0e;\n not released yet \u0026#x21a9;\u0026#xfe0e;\n   "});index.add({'id':6,'href':'/docs/configuration/','title':"Project Configuration",'section':"Docs",'content':"Configuration #  Each spec project must have a .spectools configuration file.\nA fictive example of a spectools config for a spec project.\nspectools:\u0026#34;1.20.0\u0026#34;#Minimal spectools versionspecDir:\u0026#34;./specs\u0026#34;specFormat:\u0026#34;yaml\u0026#34;#set to yaml or jsondependencies:#do not write every type/message again and again. Install them.- \u0026#34;git@github.com:theNorstroem/furoBaseSpecs.git v1.11.8\u0026#34;# The importer looks for all **/*.type.spec files recursive The importer looks for all **/*.service.spec files recursivedependenciesDir:dependencies #directory where the dependencies get installed to.muSpec:types:- \u0026#34;./muspecs/**/*types.yaml\u0026#34;- \u0026#34;./muspecs/*types.yaml\u0026#34;#Use this if you do not put your specs in foldersservices:- \u0026#34;./muspecs/**/*services.yaml\u0026#34;- \u0026#34;./muspecs/*services.yaml\u0026#34;#Use this if you do not put your specs in foldersgoPackageBase:\u0026#34;github.com/yourname/appname-specs/dist/pb/\u0026#34;#this is used to prefix the go package optionjavaPackagePrefix:\u0026#34;com.furo.base\u0026#34;dir:\u0026#34;muspecs\u0026#34;commands:#camelCase is not allowed, command scripts can only be executed from a flowgen_grpc_gateway:\u0026#34;./scripts/grpcgateway/gateway.sh\u0026#34;exec_protoc :\u0026#34;./scripts/protoc_command.sh\u0026#34;flows:default:#we choose µSpec as source https://fidl.furo.pro/docs/sourceoftruth/#%C2%B5spec-as-source- muSpec2Spec #Updates the specs from the µSpecs- genMessageProtos #Generates the protos from the type specs- genServiceProtos #Generates the protos from the services specs- exec_protoc #Custom script- gen_grpc_gateway #Custom script- genEsModule #Generates specs to use in clientsbuild:#build config, define the targets hereproto:targetDir:\u0026#34;dist/protos/\u0026#34;#Hint: add this to your proto include pathesModule:targetFile:\u0026#34;dist/env.js\u0026#34;#env module for the furo client libs dist:# this is for spectools install called on other projects, files:# enter a list of files and directories which should be installed by other projects- dist/protos- specs- README.md- .spectools"});index.add({'id':7,'href':'/docs/commands/spectools_checkImports/','title':"checkImports",'section':"Commands",'content':"spectools checkImports #  Checks and correct the imports\nSynopsis #  Use this command after moving of types. It will check and correct all imports and update the specs\nspectools checkImports [flags] Options #   -h, --help help for checkImports Options inherited from parent commands #   --config string config file (default is CWD/.spectools.yaml) SEE ALSO #    spectools\t- The furo spec toolkit  Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':8,'href':'/docs/commands/','title':"Commands",'section':"Docs",'content':"spectools #  The furo spec toolkit\nSynopsis #  Furo spectools contains helpful generators, converters, sanitizer for the furo specs. Read more about the single commands in the see also section below.\nCalling spectools without any arguments and flags will run the flow runner with the default flow. Modify your default flow in the .spectools config file to your needs. You can set any of the sub commands as default.\n Note: Environment variables are prefixed with FST.\nTo set the specformat with the environment variable use FST_SPECFORMAT=value\n spectools [flags] Options #   --config string config file (default is CWD/.spectools.yaml) -h, --help help for spectools SEE ALSO #    spectools checkImports\t- Checks and correct the imports  spectools exportAsYaml\t- Exports all specs and the current config in one yaml file to stdout  spectools genEsModule\t- generate es6 spec module  spectools genMessageProtos\t- Generate the message protos from the type specs.  spectools genServiceProtos\t- Generate service protos from the specs  spectools install\t- Installs the dependencies  spectools muSpec2Spec\t- Updates the type specs with the definitions from the type µSpecs.  spectools muSrvSanitize\t- Sanitize muServices  spectools run\t- Runs a configured flow.  spectools spec2muSpec\t- A brief description of your command  Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':9,'href':'/docs/tools/','title':"Additional Tools",'section':"Docs",'content':"Useful tools to work with the furo FIDLs #  There are a lot of tools, you have at your hand at your fingertips. If you do not want to install them (a lot of work), you can simply use the docker image thenorstroem/furo-bec. It contains erery tool you need.\nspectools #  The spectools is the essential tool to work with furoc-FIDLs, it replaces the @furo/spec npm package.\nInstallation #  brew tap theNorstroem/tap brew install spectools @furo/ui-builder #  The @furo/ui-builder is the tool to build web-components from your specs. In the near future it will be replaced with furoc-gen-u33e.\nprotoc #  The protocol buffer compiler, protoc, is used to compile .proto files, which contain service and message definitions.\nprotoc-gen-furo-specs #  Protoc plugin to generate furo specs from proto file.\nprotoc-gen-grpc-gateway (v2) #  gRPC-Gateway is a plugin of protoc. It reads a gRPC service definition, and generates a reverse-proxy server which translates a RESTful JSON API into gRPC. This server is generated according to custom options in your gRPC definition.\nprotoc-gen-go #  Generate the go stubs.\nprotoc-gen-go-grpc #  This tool generates Go language bindings of services in protobuf definition files for gRPC.\nsimple-generator #  Very simple golang template engine for cli usage, using the golang template package and the template functions from sprig.\nfuroc #  The furoc \u0026ldquo;compiler\u0026rdquo; is a generator tool similar to protoc. There are no official plugins available at the moment. But furoc-gen-u33e will come in near future.\nfuroc-gen-xxx #  Is a placeholder for all furoc plugins that will come.\n"});index.add({'id':10,'href':'/docs/commands/spectools_exportAsYaml/','title':"exportAsYaml",'section':"Commands",'content':"spectools exportAsYaml #  Exports all specs and the current config in one yaml file to stdout\nSynopsis #  Use this for your chain of generators\u0026hellip;\nYou will get a yaml with all types and services and the config. Feel free to add custom sections in the config to use them in custom commands or scripts.\nservices: your.Service: ... types: your.type: ... config: module: mod custom: remoteDir: \u0026quot;path/to/somewhere\u0026quot; otherCustomSetting: true  spectools exportAsYaml [flags] Options #   -f, --full Include the ast info -h, --help help for exportAsYaml Options inherited from parent commands #   --config string config file (default is CWD/.spectools.yaml) SEE ALSO #    spectools\t- The furo spec toolkit  Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':11,'href':'/docs/commands/spectools_genMessageProtos/','title':"genMessageProtos",'section':"Commands",'content':"spectools genMessageProtos #  Generate the message protos from the type specs.\nSynopsis #  The generated proto messages will be generated to the configured path.\n.spectools config example\nbuild: proto: targetDir: \u0026quot;./dist/protos\u0026quot; #Hint: add this to your proto include path  spectools genMessageProtos [flags] Options #   -h, --help help for genMessageProtos Options inherited from parent commands #   --config string config file (default is CWD/.spectools.yaml) SEE ALSO #    spectools\t- The furo spec toolkit  Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':12,'href':'/docs/sourceoftruth/','title':"Source of Truth",'section':"Docs",'content':"Source of Truth #  The different specification formats can be used as a source or a sink or both of them, but never use sources as source of the specs.\n mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) graph LR µSpec -- Spec Spec -- Proto Proto -- µSpec Spec -- µSpec Some transitions will loose information\n Spec --\u0026gt; *  some transitions are destructive\n Proto -\u0026gt; µSpec Spec -\u0026gt; Proto  and some are updating the sinks\n µSpec -\u0026gt; Spec Spec -\u0026gt; µSpec  You should choose one source of truth and stick to it when possible. It is always possible to change.\nSources AND Sink #   Spec µSpec Proto  Sinks only #   Es6Module (by design) Docs U33E Gateway OpenApi  Spec as source #  graph TD Spec -- Proto Spec -- µSpec Spec -- Es6Module Spec -- Docs Spec -- U33E Spec -- ... Proto -- Gateway Proto -- OpenApi Pros  only one kind of spec to work with run your flow at any time with same results (idempotency) guaranteed interoperability from backend to client   Cons  design phase is harder µSpec only for discussions and not for \u0026ldquo;design\u0026rdquo;    Recommended when you only have to maintain an existing project.  µSpec as source #  graph TD Spec -- Proto µSpec --Spec Spec -- Es6Module Spec -- Docs Spec -- U33E Spec -- ... Proto -- Gateway Proto -- OpenApi Pros  fastest variant to design new stuff simplest notation covers \u0026gt;90% of the cases idempotent guaranteed interoperability from backend to client   Cons  working in specs for some edge cases required    Recommended when you have a fresh project or a lot of changes.\nEasiest method when you know protobuf/grpc.\n Proto as source #  graph TD Proto -- µSpec µSpec --Spec Spec -- Es6Module Spec -- Docs Spec -- U33E Spec -- ... Proto -- Gateway Proto -- OpenApi Pros  good solution when everything is already defined in proto covers \u0026gt;80% of the cases idempotent   Cons  destructive step Proto \u0026ndash;\u0026gt; µSpec working in specs for some cases required writing REST service definitions by \u0026ldquo;hand\u0026rdquo; interoperability from backend to client is not guaranteed because some steps are not under control of spectools anymore.    Recommended when you have a huge portfolio of protos and want to bring them to the web (without any changes).  Advanced Setup #  This is a extended µSpec as source variant.\ngraph TD SomeProto -- µSpec µSpec -- Spec Spec -- Proto Spec -- Es6Module Spec -- Docs Spec -- U33E Spec -- ... Proto -- Gateway Proto -- OpenApi Pros  implement external changes very fast designing new stuff still fast guaranteed interoperability from backend to client   Cons  hard setup for the SomeProto part bigger skill set needed partially destructive step    Recommended when you have to import protos to your system. Use \u0026ldquo;µSpec as source\u0026rdquo; first and switch to this variant when you have to.  Multiple Sources of Truth #  The you know what you do mode.\nWhen you have to migrate a project from different spec formats, you have to use this setup. This is not recomended and should still be an exception and not the default.  graph TD SomeProto -- µSpec OtherFormats -- Spec µSpec -- Spec Spec -- Proto Spec -- µSpec Spec -- Es6Module Spec -- Docs Spec -- U33E Spec -- ... Proto -- Gateway Proto -- OpenApi Proto -- µSpec Pros  Do what ever you ever want.   Cons  Dangerous More then one flow required Not idempotent very hard setup    NOT Recommended!\nDo this only when you have to do, try to switch to another setup as fast as you can.\n "});index.add({'id':13,'href':'/docs/commands/spectools_genServiceProtos/','title':"genServiceProtos",'section':"Commands",'content':"spectools genServiceProtos #  Generate service protos from the specs\nSynopsis #  The generated proto services will be generated to the configured path.\n.spectools config example\nbuild: proto: targetDir: \u0026quot;./dist/proto\u0026quot; #Hint: add this to your proto include path\t spectools genServiceProtos [flags] Options #   -h, --help help for genServiceProtos Options inherited from parent commands #   --config string config file (default is CWD/.spectools.yaml) SEE ALSO #    spectools\t- The furo spec toolkit  Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':14,'href':'/docs/commands/spectools_genEsModule/','title':"genEsModule",'section':"Commands",'content':"spectools genEsModule #  generate es6 spec module\nSynopsis #  The furo data objects relys on the server specs.\nspectools genEsModule [flags] Options #   -h, --help help for genEsModule Options inherited from parent commands #   --config string config file (default is CWD/.spectools.yaml) SEE ALSO #    spectools\t- The furo spec toolkit  Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':15,'href':'/docs/commands/spectools_muSrvSanitize/','title':"muSrvSanitize",'section':"Commands",'content':"spectools muSrvSanitize #  Sanitize muServices\nSynopsis #  Sanitizing includes:\n Adding of query params which are part of the url.  spectools muSrvSanitize [flags] Options #   -h, --help help for muSrvSanitize Options inherited from parent commands #   --config string config file (default is CWD/.spectools.yaml) SEE ALSO #    spectools\t- The furo spec toolkit  Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':16,'href':'/docs/commands/spectools_spec2muSpec/','title':"spec2muSpec",'section':"Commands",'content':"spectools spec2muSpec #  A brief description of your command\nSynopsis #  A longer description that spans multiple lines and likely contains examples and usage of using your command. For example:\nCobra is a CLI library for Go that empowers applications. This application is a tool to generate the needed files to quickly create a Cobra application.\nspectools spec2muSpec [flags] Options #   -d, --delete Delete muSpecs which not exist in Spec -h, --help help for spec2muSpec Options inherited from parent commands #   --config string config file (default is CWD/.spectools.yaml) SEE ALSO #    spectools\t- The furo spec toolkit  Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':17,'href':'/docs/commands/spectools_install/','title':"install",'section':"Commands",'content':"spectools install #  Installs the dependencies\nSynopsis #  Installs the configured dependencies from the .spectools config.\nEnter the name of the repository and a tag or branch to install. If you want latest (not recommended) add main (master).\ndependencies: - \u0026quot;git@github.com:theNorstroem/furoBaseSpecs.git v1.10.9\u0026quot;  It is up to you to add the dependencies to your version control system. We strongly recommend this if you work with packages that are not owned by your organisation. You can compare this with vendoring in golang.\nspectools install [flags] Options #   -f, --fresh rebuild the package directories -h, --help help for install Options inherited from parent commands #   --config string config file (default is CWD/.spectools.yaml) SEE ALSO #    spectools\t- The furo spec toolkit  Auto generated by spf13/cobra on 23-Oct-2020 #  "});index.add({'id':18,'href':'/posts/hello/','title':"Hey",'section':"Blog",'content':"Initial documentation #  Hi and welcome to the first version of the spectools documentation. If you have some issues, found typos and have suggestions, feel free to open an issue or better make a pull request.\n"});})();